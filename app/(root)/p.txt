"use client"; // Jika menggunakan client-side rendering
import { useState, useEffect } from "react";
import CategoryList from "@components/CategoryList";
import Navbar from "@components/Navbar";
import { Movie } from "@lib/types";

const Home = () => {
  const [page, setPage] = useState<number>(1); // State untuk halaman
  const [movies, setMovies] = useState<Movie[]>([]); // State untuk menyimpan semua film
  const [loading, setLoading] = useState<boolean>(false); // State untuk loading
  const [hasMore, setHasMore] = useState<boolean>(true); // State untuk memeriksa apakah masih ada film yang bisa dimuat
  const moviesPerPage = 6; // Batas jumlah film per halaman

  const options = {
    method: "GET",
    headers: {
      accept: "application/json",
      Authorization: `Bearer ${process.env.NEXT_PUBLIC_ACCESS_TOKEN}`,
    },
  };

  // Fungsi untuk mengambil film populer berdasarkan halaman
  const fetchMovies = async (page: number) => {
    try {
      const response = await fetch(
        `https://api.themoviedb.org/3/movie/popular?language=en-US&page=${page}`,
        options
      );
      const data = await response.json();
      return data.results;
    } catch (error) {
      console.error("Error fetching movies:", error);
      return [];
    }
  };

  // Ambil data film pertama kali saat komponen di-mount
  useEffect(() => {
    const fetchInitialMovies = async () => {
      setLoading(true); // Set loading true saat memuat data
      try {
        const initialMovies = await fetchMovies(page); // Ambil film awal
        setMovies(initialMovies.slice(0, moviesPerPage)); // Simpan hanya 6 film pertama ke state
      } catch (error) {
        console.error("Error fetching movies:", error);
      } finally {
        setLoading(false); // Set loading false setelah data diambil
      }
    };
    fetchInitialMovies();
  }, []); // Hanya dijalankan sekali saat komponen pertama kali dimuat

  console.log("movies", movies);

  // Fungsi untuk memuat lebih banyak film
  const loadMoreMovies = async () => {
    setLoading(true); // Set loading true saat memuat film tambahan
    try {
      const nextPage = page + 1; // Halaman berikutnya
      const newMovies = await fetchMovies(nextPage); // Ambil film baru

      if (newMovies.length === 0) {
        setHasMore(false); // Jika tidak ada film baru, berhenti memuat lebih banyak
      } else {
        setMovies((prevMovies) => [
          ...prevMovies,
          ...newMovies.slice(0, moviesPerPage), // Tambahkan hanya 6 film baru ke film yang sudah ada
        ]);
        setPage(nextPage); // Update halaman
      }
    } catch (error) {
      console.error("Error loading more movies:", error);
    } finally {
      setLoading(false); // Set loading false setelah film baru dimuat
    }
  };

  return (
    <div>
      <Navbar />
      <div className="all-movies">
        {/* Tampilkan daftar film */}
        <CategoryList title="Popular Movies" movies={movies} />

        {/* Tombol Load More */}
        {hasMore && (
          <div className="load-more">
            <button onClick={loadMoreMovies} disabled={loading}>
              {loading ? "Loading..." : "Load More"}{" "}
              {/* Ubah teks tombol saat loading */}
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default Home;
